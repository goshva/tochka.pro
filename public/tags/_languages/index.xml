<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>_languages on Точка.Pro Центр иновационного творчества</title>
    <link>https://aeroki.ru/tags/_languages/</link>
    <description>Recent content in _languages on Точка.Pro Центр иновационного творчества</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language><atom:link href="https://aeroki.ru/tags/_languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Kotlin multiplatform evolution</title>
      <link>https://aeroki.ru/sessions/a_kotlin_multiplatform_evolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aeroki.ru/sessions/a_kotlin_multiplatform_evolution/</guid>
      <description>Have you heard of the code-sharing feature in Kotlin, accompanied with &amp;ldquo;Write once, run everywhere&amp;rdquo; slogan? Among its users not only libraries and frameworks authors; there are some projects which have already adopted multiplatform for production. Their applications, written in Kotlin for both iOS and Android, are published in stores. With this talk, you&amp;rsquo;ll get a brief overview of the evolution of multiplatform technology in Kotlin, concerning the tasks it&amp;rsquo;s evolved to solve.</description>
    </item>
    
    <item>
      <title>Rust as a High-Level Langage</title>
      <link>https://aeroki.ru/sessions/rust_as_a_high_level_langage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aeroki.ru/sessions/rust_as_a_high_level_langage/</guid>
      <description>The singe most important feature of Rust is memory safety. Writing code with performance of C++, at a typical development cost, and with guaranteed absence of certain classes of memory safety related vulnerabilities is something that was not possible before.
However, all popular managed languages with garbage collection take memory safety for granted, so this aspect of Rust doesn&amp;rsquo;t bring anything new to the table, if you already use Java or Go.</description>
    </item>
    
    <item>
      <title>The Freedom of Static Typing</title>
      <link>https://aeroki.ru/sessions/the_freedom_of_static_typing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aeroki.ru/sessions/the_freedom_of_static_typing/</guid>
      <description>It&amp;rsquo;s a common idea: Dynamic typing gives you freedom to do whatever you want, but then you suffer mistakes and runtime errors. Static typing limits your freedom, but it leads to fewer bugs, even if it&amp;rsquo;s harder to actually write code.
This isn&amp;rsquo;t entirely false. Yes, it can be quite hard to write a Rust or Haskell program that compiles, enough that it&amp;rsquo;s a running gag in their communities. &amp;ldquo;But once you get it to compile, it&amp;rsquo;s probably correct!</description>
    </item>
    
  </channel>
</rss>
